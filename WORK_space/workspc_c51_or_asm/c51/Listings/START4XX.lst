A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\START4XX.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE START4XX.A51 SET(SMALL) DEBUG PRINT(.\Listings\START4XX.lst) OBJECT(.\O
                      bjects\START4XX.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     $nomod51 
                       2     ;------------------------------------------------------------------------------
                       3     ;  This file is part of the C51 Compiler package
                       4     ;  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, Inc.
                       5     ;  Startup code for Dallas DS89C420/430/440/450
                       6     ;------------------------------------------------------------------------------
                       7     ;  START4XX.A51:  This code is executed after processor reset.
                       8     ;  You may add this file to a uVision2 project.
                       9     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                      10     ;  To translate this file use A51 with the following invocation:
                      11     ;
                      12     ;     AX51 START4XX.A51 MOD_CONT
                      13     ;
                      14     ;  To link the modified STARTUP.OBJ file to your application use the following
                      15     ;  LX51 invocation:
                      16     ;
                      17     ;     LX51 your object file list, START4XX.OBJ [controls]
                      18     
                      19     ;
                      20     ;------------------------------------------------------------------------------
                      21     ;
                      22     ; <h>Chip Specific Options 
                      23     ;
                      24     ;  <h>ACON - Page Mode Enable and External Memory Cycle Control
                      25     ;  <q.7>  PAGEEE: Page Mode Enable (ACON.7)
                      26     ;      0 => Disable Page Mode
                      27     ;      1 => Enable Page Mode
                      28     ;
                      29     ;  <o.5..6> PAGES: Page Mode Multiplex on Port 2 & Timing Select (ACON.6, ACON.5)
                      30     ;   <0=> Multiplex address MSB/LSB,  page hit: 1 cycle,  page miss: 2 cycles
                      31     ;   <1=> Multiplex address MSB/LSB,  page hit: 2 cycles, page miss: 4 cycles
                      32     ;   <2=> Multiplex address MSB/LSB,  page hit: 4 cycles, page miss: 8 cycles
                      33     ;   <3=> Multiplex address MSB/data, page hit: 2 cycles, page miss: 4 cycles
  00A0                34     ACONVAL EQU 0xA0
                      35     ;  </h>
                      36     ;
                      37     ;  <e> PMR - Power Management Register
  0001                38     CLOCKADJUST EQU 1
                      39     ;   <o> CD: Clock Divide Control (PMR.7, PMR.6, PMR.3)
                      40     ;           <0x08=> x4 Mode (Crystal multiplier 4)
                      41     ;           <0x00=> x2 Mode (Crystal multiplier 2)
                      42     ;           <0x80=> Direct Mode (Crystal = clock, default)
                      43     ;           <0xC0=> /1024 Mode (Crystal divided by 1024)
  0008                44     _CKMODE  EQU 0x08
                      45     ;   <q.2>    ALEON: ALE Enable
                      46     ;   <i> When set this bit enables the ALE signal output during on-chip program
                      47     ;   <i> and data memory accesses.
                      48     ;   <o.0..1> DME: Data Memory Enable (PMR.0, PMR.1)
                      49     ;        <0=> 0000h–FFFFh External Data Memory (default)
                      50     ;        <1=> 0000h–03FFh Internal Data Memory / 0400h–FFFFh External Data Memory
  0005                51     _PMR     EQU  5
                      52     ;  </e>
                      53     ; </h>
                      54     ;------------------------------------------------------------------------------
                      55     ;
                      56     ; <h> User-defined Power-On Initialization of Memory
                      57     ;
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     2

                      58     ;  With the following EQU statements the initialization of memory
                      59     ;  at processor reset can be defined:
                      60     ;
                      61     ;  <o> IDATALEN: The length of IDATA memory in bytes.
                      62     ;      <i> The absolute start-address of IDATA memory is always 0
  0080                63     IDATALEN        EQU     80H     
                      64     ;
                      65     ;  <o> XDATASTART: The length of XDATA memory in bytes.
  0000                66     XDATASTART      EQU     0x0      ; the absolute start-address of XDATA memory
                      67     ;  <o> XDATALEN: The absolute start-address of XDATA memory
  0000                68     XDATALEN        EQU     0H      ; the length of XDATA memory in bytes.
                      69     
                      70     ;  <o> PDATASTART: The length of PDATA memory in bytes.
  0000                71     PDATASTART      EQU     0H      ; the absolute start-address of PDATA memory
                      72     ;  <o> PDATALEN: The absolute start-address of PDATA memory
  0000                73     PDATALEN        EQU     0H      ; the length of PDATA memory in bytes.
                      74     ; </h>
                      75     ;
                      76     ;  Notes:  The IDATA space overlaps physically the DATA and BIT areas of the
                      77     ;          8051 CPU. At minimum the memory space occupied from the C51 
                      78     ;          run-time routines must be set to zero.
                      79     ;------------------------------------------------------------------------------
                      80     ;
                      81     ; <h>Reentrant Stack Initialization
                      82     ;
                      83     ;  The following EQU statements define the stack pointer for reentrant
                      84     ;  functions and initialized it:
                      85     ;
                      86     ;  <h>Stack Space for reentrant functions in the SMALL model.
                      87     ;   <q>IBPSTACK: Enable reentrant Stack for SMALL model
  0000                88     IBPSTACK        EQU     0       ; set to 1 if small reentrant is used.
                      89     ;   <o>IBPSTACKTOP: Stack Top  <0x0-0xFF>
  0100                90     IBPSTACKTOP     EQU     0xFF+1  ; set top of stack to highest location+1.
                      91     ;  </h>
                      92     ;
                      93     ;  <h>Stack Space for reentrant functions in the LARGE model.
                      94     ;   <q>XBPSTACK: Enable reentrant Stack for LARGE model      
  0000                95     XBPSTACK        EQU     0       ; set to 1 if large reentrant is used.
                      96     ;   <o>XBPSTACKTOP: Stack Top  <0x0-0xFFFF>
  0000                97     XBPSTACKTOP     EQU     0xFFFF+1; set top of stack to highest location+1.
                      98     ;  </h>
                      99     ;
                     100     ;  <h>Stack Space for reentrant functions in the COMPACT model.
                     101     ;   <q>PBPSTACK: Enable reentrant Stack for COMPACT model    
  0000               102     PBPSTACK        EQU     0       ; set to 1 if compact reentrant is used.
                     103     ;   <o>PBPSTACKTOP: Stack Top  <0x0-0xFFFF>
  0000               104     PBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                     105     ;
                     106     ;  </h>
                     107     ;------------------------------------------------------------------------------
                     108     ;
                     109     ;  Page Definition for Using the Compact Model with 64 KByte xdata RAM
                     110     ;
                     111     ;  The following EQU statements define the xdata page used for pdata
                     112     ;  variables. The EQU PPAGE must conform with the PPAGE control used
                     113     ;  in the linker invocation.
                     114     ;  
                     115     ;  <e> PPAGEENABLE: Compact Model Page Definition
                     116     ;      <i>Define the xdata page used for pdata variables. 
                     117     ;      <i>PPAGE must conform with the PPAGE set in the linker invocation.
                     118     ;
                     119     ; Enable pdata memory page initalization
  0000               120     PPAGEENABLE     EQU     0       ; set to 1 if pdata object are used.
                     121     ;
                     122     ;   <o> PPAGE: Page number <0x0-0xFF> 
                     123     ;       <i> Uppermost 256-byte address of the page used for pdata variables.
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     3

  0000               124     PPAGE           EQU     0       ; define PPAGE number.
                     125     ;
                     126     ;   <o> PPAGE_SFR: SFR address containing the uppermost address byte <0x0-0xFF> 
                     127     ;       <i> Most 8051 variants use P2 as uppermost address byte
  00A0               128     PPAGE_SFR       DATA    0A0H
                     129     ;
                     130     ;  </e>
                     131     ; </h>
                     132     
                     133     ;------------------------------------------------------------------------------
                     134     
                     135     ;#include <REG420.H>
                +1   136     
                +1   137     
                +1   138     
                +1   139     
                +1   140     
                +1   141     
                +1   142     
                +1   143     
                +1   144     
                +1   145     
                +1   146     
                +1   147     
  0080          +1   148     sfr P0      = 0x80;
  0081          +1   149     sfr SP      = 0x81;
  0082          +1   150     sfr DPL     = 0x82;
  0083          +1   151     sfr DPH     = 0x83;
  0084          +1   152     sfr DPL1    = 0x84;
  0085          +1   153     sfr DPH1    = 0x85;
  0086          +1   154     sfr DPS     = 0x86;
  0087          +1   155     sfr PCON    = 0x87;
  0088          +1   156     sfr TCON    = 0x88;
  0089          +1   157     sfr TMOD    = 0x89;
  008A          +1   158     sfr TL0     = 0x8A;
  008B          +1   159     sfr TL1     = 0x8B;
  008C          +1   160     sfr TH0     = 0x8C;
  008D          +1   161     sfr TH1     = 0x8D;
  008E          +1   162     sfr CKCON   = 0x8E;
  0090          +1   163     sfr P1      = 0x90;
  0091          +1   164     sfr EXIF    = 0X91;
  0096          +1   165     sfr CKMOD   = 0x96;
  0098          +1   166     sfr SCON0   = 0x98;
  0099          +1   167     sfr SBUF0   = 0x99;
  009D          +1   168     sfr ACON    = 0x9D;
  00A0          +1   169     sfr P2      = 0xA0;
  00A8          +1   170     sfr IE      = 0xA8;
  00A9          +1   171     sfr SADDR0  = 0xA9;
  00AA          +1   172     sfr SADDR1  = 0xAA;
  00B0          +1   173     sfr P3      = 0xB0;
  00B1          +1   174     sfr IP1     = 0xB1;
  00B8          +1   175     sfr IP0     = 0xB8;
  00B9          +1   176     sfr SADEN0  = 0xB9;
  00BA          +1   177     sfr SADEN1  = 0xBA;
  00C0          +1   178     sfr SCON1   = 0xC0;
  00C1          +1   179     sfr SBUF1   = 0xC1;
  00C2          +1   180     sfr ROMSIZ  = 0xC2;
  00C4          +1   181     sfr PMR     = 0xC4;
  00C5          +1   182     sfr STATUS  = 0xC5;
  00C7          +1   183     sfr TA      = 0xC7;
  00C8          +1   184     sfr T2CON   = 0xC8;
  00C9          +1   185     sfr T2MOD   = 0xC9;
  00CA          +1   186     sfr RCAP2L  = 0xCA;
  00CB          +1   187     sfr RCAP2H  = 0xCB;
  00CC          +1   188     sfr TL2     = 0xCC;
  00CD          +1   189     sfr TH2     = 0xCD;
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     4

  00D0          +1   190     sfr PSW     = 0xD0;
  00D5          +1   191     sfr FCNTL   = 0xD5;
  00D6          +1   192     sfr FDATA   = 0xD6;
  00D8          +1   193     sfr WDCON   = 0xD8;
  00E0          +1   194     sfr ACC     = 0xE0;
  00E8          +1   195     sfr EIE     = 0xE8;
  00F0          +1   196     sfr B       = 0xF0;
  00F1          +1   197     sfr EIP1    = 0xF1;
  00F8          +1   198     sfr EIP0    = 0xF8;
                +1   199     
                +1   200     
                +1   201     
  0088          +1   202     sbit IT0    = 0x88;
  0089          +1   203     sbit IE0    = 0x89;
  008A          +1   204     sbit IT1    = 0x8A;
  008B          +1   205     sbit IE1    = 0x8B;
  008C          +1   206     sbit TR0    = 0x8C;
  008D          +1   207     sbit TF0    = 0x8D;
  008E          +1   208     sbit TR1    = 0x8E;
  008F          +1   209     sbit TF1    = 0x8F;
                +1   210     
                +1   211      
  0098          +1   212     sbit RI     = 0x98;
  0099          +1   213     sbit TI     = 0x99;
  009A          +1   214     sbit RB8    = 0x9A;
  009B          +1   215     sbit TB8    = 0x9B;
  009C          +1   216     sbit REN    = 0x9C;
  009D          +1   217     sbit SM2    = 0x9D;
  009E          +1   218     sbit SM1    = 0x9E;
  009F          +1   219     sbit SM0    = 0x9F;
                +1   220     
  0098          +1   221     sbit RI_0    = 0x98; /* alternative definitions */
  0099          +1   222     sbit TI_0    = 0x99;
  009A          +1   223     sbit RB8_0   = 0x9A;
  009B          +1   224     sbit TB8_0   = 0x9B;
  009C          +1   225     sbit REN_0   = 0x9C;
  009D          +1   226     sbit SM2_0   = 0x9D;
  009E          +1   227     sbit SM1_0   = 0x9E;
  009F          +1   228     sbit SM0FE_0 = 0x9F;
                +1   229     
                +1   230     
  00A8          +1   231     sbit EX0    = 0xA8;
  00A9          +1   232     sbit ET0    = 0xA9;
  00AA          +1   233     sbit EX1    = 0xAA;
  00AB          +1   234     sbit ET1    = 0xAB;
  00AC          +1   235     sbit ES0    = 0xAC;
  00AD          +1   236     sbit ET2    = 0xAD;
  00AE          +1   237     sbit ES1    = 0xAE;
  00AF          +1   238     sbit EA     = 0xAF;
                +1   239     
                +1   240     
  00B8          +1   241     sbit LPX0   = 0xB8;
  00B9          +1   242     sbit LPT0   = 0xB9;
  00BA          +1   243     sbit LPX1   = 0xBA;
  00BB          +1   244     sbit LPT1   = 0xBB;
  00BC          +1   245     sbit LPS0   = 0xBC;
  00BD          +1   246     sbit LPT2   = 0xBD;
  00BE          +1   247     sbit LPS1   = 0xBE;
                +1   248     
                +1   249     
  00C0          +1   250     sbit RI1    = 0xC0;
  00C1          +1   251     sbit TI1    = 0xC1;
  00C2          +1   252     sbit RB81   = 0xC2;
  00C3          +1   253     sbit TB81   = 0xC3;
  00C4          +1   254     sbit REN1   = 0xC4;
  00C5          +1   255     sbit SM21   = 0xC5;
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     5

  00C6          +1   256     sbit SM11   = 0xC6;
  00C7          +1   257     sbit SM01   = 0xC7;
                +1   258     
  00C0          +1   259     sbit RI_1    = 0xC0;   /* alternative definition */
  00C1          +1   260     sbit TI_1    = 0xC1;
  00C2          +1   261     sbit RB8_1   = 0xC2;
  00C3          +1   262     sbit TB8_1   = 0xC3;
  00C4          +1   263     sbit REN_1   = 0xC4;
  00C5          +1   264     sbit SM2_1   = 0xC5;
  00C6          +1   265     sbit SM1_1   = 0xC6;
  00C7          +1   266     sbit SM0FE_1 = 0xC7;
                +1   267     
                +1   268     
  00C8          +1   269     sbit CP_RL2 = 0xC8;
  00C9          +1   270     sbit C_T2   = 0xC9;
  00CA          +1   271     sbit TR2    = 0xCA;
  00CB          +1   272     sbit EXEN2  = 0xCB;
  00CC          +1   273     sbit TCLK   = 0xCC;
  00CD          +1   274     sbit RCLK   = 0xCD;
  00CE          +1   275     sbit EXF2   = 0xCE;
  00CF          +1   276     sbit TF2    = 0xCF;
                +1   277     
                +1   278     
  00D0          +1   279     sbit P      = 0xD0;
  00D1          +1   280     sbit F1     = 0xD1;
  00D2          +1   281     sbit OV     = 0xD2;
  00D3          +1   282     sbit RS0    = 0xD3;
  00D4          +1   283     sbit RS1    = 0xD4;
  00D5          +1   284     sbit F0     = 0xD5;
  00D6          +1   285     sbit AC     = 0xD6;
  00D7          +1   286     sbit CY     = 0xD7;
                +1   287     
                +1   288     
  00D8          +1   289     sbit RWT    = 0xD8;
  00D9          +1   290     sbit EWT    = 0xD9;
  00DA          +1   291     sbit WTRF   = 0xDA;
  00DB          +1   292     sbit WDIF   = 0xDB;
  00DC          +1   293     sbit PFI    = 0xDC;
  00DD          +1   294     sbit EPFI   = 0xDD;
  00DE          +1   295     sbit POR    = 0xDE;
  00DF          +1   296     sbit SMOD_1 = 0xDF;
                +1   297     
                +1   298     
  00E8          +1   299     sbit EX2    = 0xE8;
  00E9          +1   300     sbit EX3    = 0xE9;
  00EA          +1   301     sbit EX4    = 0xEA;
  00EB          +1   302     sbit EX5    = 0xEB;
  00EC          +1   303     sbit EWDI   = 0xEC;
                +1   304     
                +1   305     
  00F8          +1   306     sbit LPX2   = 0xF8;
  00F9          +1   307     sbit LPX3   = 0xF9;
  00FA          +1   308     sbit LPX4   = 0xFA;
  00FB          +1   309     sbit LPPX5  = 0xFB;
  00FC          +1   310     sbit LPWDI  = 0xFC;
                +1   311     
                +1   312     
                +1   313     
                +1   314     
                     315     
                     316     
                     317                     NAME    ?C_STARTUP
                     318     
                     319     
                     320     ?C_C51STARTUP   SEGMENT   CODE
                     321     ?STACK          SEGMENT   IDATA
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     6

                     322     
----                 323                     RSEG    ?STACK
0000                 324                     DS      1
                     325     
                     326                     EXTRN CODE (?C_START)
                     327                     PUBLIC  ?C_STARTUP
                     328     
----                 329                     CSEG    AT      0
0000 020000   F      330     ?C_STARTUP:     LJMP    STARTUP1
                     331     
----                 332                     RSEG    ?C_C51STARTUP
                     333     
0000                 334     STARTUP1:
                     335     
0000 85A09D          336                     MOV     ACON, ACONVAL                   
                     337     
                     338     IF CLOCKADJUST <> 0
0003 75C480          339                     MOV     PMR,#0x80                        ; Clock direct
0006 5391FB          340                     ANL     EXIF,#NOT 0x04                   ; Clear RGMG
0009 75C49D          341                     MOV     PMR,#(_PMR OR _CKMODE OR 0x90)   ; put new clock value
000C                 342     NOT_STABLE:
000C E591            343                     MOV     A,EXIF
000E 30E3FB          344                     JNB     ACC.3,NOT_STABLE                 ; wait until stable
0011 53C43F          345                     ANL     PMR,#03FH                        ; Clear clock direct
                     346     $endif 
                     347     
                     348     IF IDATALEN <> 0
0014 787F            349                     MOV     R0,#IDATALEN - 1
0016 E4              350                     CLR     A
0017 F6              351     IDATALOOP:      MOV     @R0,A
0018 D8FD            352                     DJNZ    R0,IDATALOOP
                     353     ENDIF
                     354     
                     355     IF XDATALEN <> 0
                                             MOV     DPTR,#XDATASTART
                                             MOV     R7,#LOW (XDATALEN)
                               IF (LOW (XDATALEN)) <> 0
                                             MOV     R6,#(HIGH (XDATALEN)) +1
                               ELSE
                                             MOV     R6,#HIGH (XDATALEN)
                               ENDIF
                                             CLR     A
                             XDATALOOP:      MOVX    @DPTR,A
                                             INC     DPTR
                                             DJNZ    R7,XDATALOOP
                                             DJNZ    R6,XDATALOOP
                             ENDIF
                     369     
                     370     IF PPAGEENABLE <> 0
                                             MOV     PPAGE_SFR,#PPAGE
                             ENDIF
                     373     
                     374     IF PDATALEN <> 0
                                             MOV     R0,#LOW (PDATASTART)
                                             MOV     R7,#LOW (PDATALEN)
                                             CLR     A
                             PDATALOOP:      MOVX    @R0,A
                                             INC     R0
                                             DJNZ    R7,PDATALOOP
                             ENDIF
                     382     
                     383     
                     384     
                     385     IF IBPSTACK <> 0
                             EXTRN DATA (?C_IBP)
                             
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     7

                                             MOV     ?C_IBP,#LOW IBPSTACKTOP
                             ENDIF
                     390     
                     391     IF XBPSTACK <> 0
                             EXTRN DATA (?C_XBP)
                             
                                             MOV     ?C_XBP,#HIGH XBPSTACKTOP
                                             MOV     ?C_XBP+1,#LOW XBPSTACKTOP
                             ENDIF
                     397     
                     398     IF PBPSTACK <> 0
                             EXTRN DATA (?C_PBP)
                                             MOV     ?C_PBP,#LOW PBPSTACKTOP
                             ENDIF
                     402     
001A 758100   F      403                     MOV     SP,#?STACK-1
                     404     ; This code is required if you use L51_BANK.A51 with Banking Mode 4
                     405     ;<h> Code Banking
                     406     ; <q> Select Bank 0 for L51_BANK.A51 Mode 4
                     407     
                             
                              
                                             
                             
                     412     ;</h>
001D 020000   F      413                     LJMP    ?C_START
                     414     
                     415                     END
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     8

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?C_C51STARTUP. . .  C SEG    0020H       REL=UNIT
?C_START . . . . .  C ADDR   -----       EXT
?C_STARTUP . . . .  C ADDR   0000H   A   
?STACK . . . . . .  I SEG    0001H       REL=UNIT
AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
ACON . . . . . . .  D ADDR   009DH   A   
ACONVAL. . . . . .  N NUMB   00A0H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
CKCON. . . . . . .  D ADDR   008EH   A   
CKMOD. . . . . . .  D ADDR   0096H   A   
CLOCKADJUST. . . .  N NUMB   0001H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPH1 . . . . . . .  D ADDR   0085H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
DPL1 . . . . . . .  D ADDR   0084H   A   
DPS. . . . . . . .  D ADDR   0086H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
EIE. . . . . . . .  D ADDR   00E8H   A   
EIP0 . . . . . . .  D ADDR   00F8H   A   
EIP1 . . . . . . .  D ADDR   00F1H   A   
EPFI . . . . . . .  B ADDR   00D8H.5 A   
ES0. . . . . . . .  B ADDR   00A8H.4 A   
ES1. . . . . . . .  B ADDR   00A8H.6 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
EWDI . . . . . . .  B ADDR   00E8H.4 A   
EWT. . . . . . . .  B ADDR   00D8H.1 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EX2. . . . . . . .  B ADDR   00E8H.0 A   
EX3. . . . . . . .  B ADDR   00E8H.1 A   
EX4. . . . . . . .  B ADDR   00E8H.2 A   
EX5. . . . . . . .  B ADDR   00E8H.3 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
EXIF . . . . . . .  D ADDR   0091H   A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
F1 . . . . . . . .  B ADDR   00D0H.1 A   
FCNTL. . . . . . .  D ADDR   00D5H   A   
FDATA. . . . . . .  D ADDR   00D6H   A   
IBPSTACK . . . . .  N NUMB   0000H   A   
IBPSTACKTOP. . . .  N NUMB   0100H   A   
IDATALEN . . . . .  N NUMB   0080H   A   
IDATALOOP. . . . .  C ADDR   0017H   R   SEG=?C_C51STARTUP
IE . . . . . . . .  D ADDR   00A8H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . .  B ADDR   0088H.3 A   
IP0. . . . . . . .  D ADDR   00B8H   A   
IP1. . . . . . . .  D ADDR   00B1H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LPPX5. . . . . . .  B ADDR   00F8H.3 A   
LPS0 . . . . . . .  B ADDR   00B8H.4 A   
LPS1 . . . . . . .  B ADDR   00B8H.6 A   
LPT0 . . . . . . .  B ADDR   00B8H.1 A   
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE     9

LPT1 . . . . . . .  B ADDR   00B8H.3 A   
LPT2 . . . . . . .  B ADDR   00B8H.5 A   
LPWDI. . . . . . .  B ADDR   00F8H.4 A   
LPX0 . . . . . . .  B ADDR   00B8H.0 A   
LPX1 . . . . . . .  B ADDR   00B8H.2 A   
LPX2 . . . . . . .  B ADDR   00F8H.0 A   
LPX3 . . . . . . .  B ADDR   00F8H.1 A   
LPX4 . . . . . . .  B ADDR   00F8H.2 A   
NOT_STABLE . . . .  C ADDR   000CH   R   SEG=?C_C51STARTUP
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PBPSTACK . . . . .  N NUMB   0000H   A   
PBPSTACKTOP. . . .  N NUMB   0000H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PDATALEN . . . . .  N NUMB   0000H   A   
PDATASTART . . . .  N NUMB   0000H   A   
PFI. . . . . . . .  B ADDR   00D8H.4 A   
PMR. . . . . . . .  D ADDR   00C4H   A   
POR. . . . . . . .  B ADDR   00D8H.6 A   
PPAGE. . . . . . .  N NUMB   0000H   A   
PPAGEENABLE. . . .  N NUMB   0000H   A   
PPAGE_SFR. . . . .  D ADDR   00A0H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RB81 . . . . . . .  B ADDR   00C0H.2 A   
RB8_0. . . . . . .  B ADDR   0098H.2 A   
RB8_1. . . . . . .  B ADDR   00C0H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
REN. . . . . . . .  B ADDR   0098H.4 A   
REN1 . . . . . . .  B ADDR   00C0H.4 A   
REN_0. . . . . . .  B ADDR   0098H.4 A   
REN_1. . . . . . .  B ADDR   00C0H.4 A   
RI . . . . . . . .  B ADDR   0098H.0 A   
RI1. . . . . . . .  B ADDR   00C0H.0 A   
RI_0 . . . . . . .  B ADDR   0098H.0 A   
RI_1 . . . . . . .  B ADDR   00C0H.0 A   
ROMSIZ . . . . . .  D ADDR   00C2H   A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RWT. . . . . . . .  B ADDR   00D8H.0 A   
SADDR0 . . . . . .  D ADDR   00A9H   A   
SADDR1 . . . . . .  D ADDR   00AAH   A   
SADEN0 . . . . . .  D ADDR   00B9H   A   
SADEN1 . . . . . .  D ADDR   00BAH   A   
SBUF0. . . . . . .  D ADDR   0099H   A   
SBUF1. . . . . . .  D ADDR   00C1H   A   
SCON0. . . . . . .  D ADDR   0098H   A   
SCON1. . . . . . .  D ADDR   00C0H   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM01 . . . . . . .  B ADDR   00C0H.7 A   
SM0FE_0. . . . . .  B ADDR   0098H.7 A   
SM0FE_1. . . . . .  B ADDR   00C0H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM11 . . . . . . .  B ADDR   00C0H.6 A   
SM1_0. . . . . . .  B ADDR   0098H.6 A   
SM1_1. . . . . . .  B ADDR   00C0H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SM21 . . . . . . .  B ADDR   00C0H.5 A   
SM2_0. . . . . . .  B ADDR   0098H.5 A   
SM2_1. . . . . . .  B ADDR   00C0H.5 A   
A51 MACRO ASSEMBLER  START4XX                                                             04/10/2024 19:14:56 PAGE    10

SMOD_1 . . . . . .  B ADDR   00D8H.7 A   
SP . . . . . . . .  D ADDR   0081H   A   
STARTUP1 . . . . .  C ADDR   0000H   R   SEG=?C_C51STARTUP
STATUS . . . . . .  D ADDR   00C5H   A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2MOD. . . . . . .  D ADDR   00C9H   A   
TA . . . . . . . .  D ADDR   00C7H   A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TB81 . . . . . . .  B ADDR   00C0H.3 A   
TB8_0. . . . . . .  B ADDR   0098H.3 A   
TB8_1. . . . . . .  B ADDR   00C0H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TI1. . . . . . . .  B ADDR   00C0H.1 A   
TI_0 . . . . . . .  B ADDR   0098H.1 A   
TI_1 . . . . . . .  B ADDR   00C0H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
WDCON. . . . . . .  D ADDR   00D8H   A   
WDIF . . . . . . .  B ADDR   00D8H.3 A   
WTRF . . . . . . .  B ADDR   00D8H.2 A   
XBPSTACK . . . . .  N NUMB   0000H   A   
XBPSTACKTOP. . . .  N NUMB   0000H   A   
XDATALEN . . . . .  N NUMB   0000H   A   
XDATASTART . . . .  N NUMB   0000H   A   
_CKMODE. . . . . .  N NUMB   0008H   A   
_PMR . . . . . . .  N NUMB   0005H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
