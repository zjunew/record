#include "stdafx.h"
#include <stdio.h>
#include <string.h>
#include <openssl/rand.h>
#include <openssl/rsa.h>
#include <openssl/bn.h>
#pragma comment(lib, "libeay32.lib")
#pragma comment(lib, "ssleay32.lib")



void dump_rsa(RSA *prsa)
{
    printf("rsa size=%d bits\n", RSA_size(prsa)*8);
    printf("n=%s\n", BN_bn2hex(prsa->n));
    printf("p=%s\n", BN_bn2hex(prsa->p));
    printf("q=%s\n", BN_bn2hex(prsa->q));
    printf("d=%s\n", BN_bn2hex(prsa->d));
    printf("e=%s\n", BN_bn2hex(prsa->e));
}

void dump_hex(unsigned char *p, int n, unsigned char *q)
{
   int i;
   for(i=0; i<n; i++)
   {
      sprintf((char *)&q[i*2], "%02X", p[i]);
   }
   q[i*2] = '\0';
}

void scan_hex(unsigned char *p, int n, unsigned char *q)
{
   int i;
   for(i=0; i<n; i++)
   {
      sscanf((char *)&p[i*2], "%02X", &q[i]);
   }
}

main()
{
   /*
   generate_rsa_key(1024);
    */
   unsigned char plaintext[256] = "A Quick BrownFox" /* 128-bit */
                                  "for 256-bit key." /* 256-bit */
                                  "The 512-bit key is being tested."  /* 512-bit */
                                  "A quick brown fox jumps over the"
                                  " lazy dog. Testing 1024-bit key."; /* 1024-bit */

   unsigned char ciphertext[512];
   unsigned char bufin[256];
   unsigned char bufout[256];
   int n;

   /* 
   do_encrypt_decrypt_myself(); 
    */

   RSA *prsa;
   
   prsa = RSA_new();
   prsa->flags |= RSA_FLAG_NO_BLINDING; /* 在blinding模式下, 使用私钥加密或解密时都会
                                           使用公钥; 设置flags关闭blinding模式 */

   char N0[0x101], E0[0x101], N1[0x101], D1[0x101];
   gets(N0);
   gets(E0);
   gets(N1);
   gets(D1);
   BIGNUM *pn0, *pe0, *pn1, *pd1;
   pn0 = BN_new();
   pe0 = BN_new();
   pn1 = BN_new();
   pd1 = BN_new();

   BN_hex2bn(&pn0, N0);
   BN_hex2bn(&pe0, E0);
   BN_hex2bn(&pd1, D1);
   BN_hex2bn(&pn1, N1);
   /*==============公钥加密,私钥解密,PKCS1_PADDING=============*/
   prsa->n = pn1;
   
   //puts("Decrypting by calling RSA_private_decrypt()...");
   char c[0x101];
   gets(c);
	
   char m[0x101];
   gets(m);//测试方便

   prsa->e = NULL;
   prsa->d = pd1;
   n = strlen(c)/2;
   scan_hex((unsigned char *)c, n, bufin);
   memset(bufout, 0, sizeof(bufout));
   n = RSA_private_decrypt(n, bufin, bufout, prsa, RSA_PKCS1_PADDING);
   puts((char *)bufout);
   puts("=================================================");
   
   unsigned char plain_text[0x101];
   dump_hex(bufout, n, plain_text);
   printf("\nplain_text = %s , %d\n",plain_text , n);

   prsa->n = pn0;
   prsa->e = pe0;
   prsa->d = NULL;
   n = RSA_size(prsa)-11; /* 明文最大字节数 = RSA_size(prsa)-11 */
   memset(bufin, 0, sizeof(bufin));
   strncpy((char *)bufin, (char *)plain_text, n);
   puts("Encrypting by calling RSA_public_encrypt()...");
   printf("plaintext=%s\n", bufin);
   n = RSA_public_encrypt(n, bufin, bufout, prsa, RSA_PKCS1_PADDING);
   dump_hex(bufout, n, (unsigned char *)c);
   printf("ciphertext=%s\n", c);
   

   RSA_free(prsa);

   return 0;
}
